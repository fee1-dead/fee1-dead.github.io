<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>beef&#x27;s blog</title>
    <link rel="self" type="application/atom+xml" href="https://fee1-dead.github.io/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://fee1-dead.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-06-09T00:00:00+00:00</updated>
    <id>https://fee1-dead.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>Devlog 002</title>
        <published>2025-06-09T00:00:00+00:00</published>
        <updated>2025-06-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              beef
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://fee1-dead.github.io/devlog002/"/>
        <id>https://fee1-dead.github.io/devlog002/</id>
        
        <content type="html" xml:base="https://fee1-dead.github.io/devlog002/">&lt;p&gt;Hi y&#x27;all! It&#x27;s been &lt;a href=&quot;..&#x2F;devlog001&#x2F;&quot;&gt;a while&lt;&#x2F;a&gt; since I&#x27;ve done a devlog, and I figured it&#x27;s time to share a bunch of things
I have worked on, just to celebrate what I&#x27;ve done and take some time to reflect on what I could do next.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s get into it!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rust-related-stuff&quot;&gt;Rust related stuff&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;const-traits&quot;&gt;Const Traits&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;ve been working on this feature for almost &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;86750&quot;&gt;four years&lt;&#x2F;a&gt; now, and the
feature is only recently getting some momentum towards finally being accepted. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oli-obk&quot;&gt;Oli&lt;&#x2F;a&gt; opened a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;3762&quot;&gt;new RFC&lt;&#x2F;a&gt; which drew a lot
of commentary and the lang team seems ready to accept, though only after we figure out how the syntax works. There&#x27;s a
lot of design work, which includes debating the syntax and finding reasons why one color for the shed works better than
the other, which is happening at the &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.zulipchat.com&#x2F;#narrow&#x2F;channel&#x2F;328082-t-lang.2Feffects&quot;&gt;#t-lang&#x2F;effects Zulip channel&lt;&#x2F;a&gt;. I tried to articulate reasons for the colors I
prefer, and I was moderately successful in convincing the lang team into adopting some of the choice.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m actually hoping that const traits can get stabilized this year, given the amount of time and effort everyone is
putting in to polish the language design into completion. I&#x27;m glad that I was able to help (even though &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;compiler-errors&quot;&gt;errs&lt;&#x2F;a&gt; did a
really fantastic job of figuring out the compiler architecture to make the thing robust and easy to develop) on the
compiler side to push things to a stable and well-tested state.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;frontmatters&quot;&gt;Frontmatters&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;140035&quot;&gt;This&lt;&#x2F;a&gt; was a particularly cool PR because I think I like working on the
compiler frontend. The backstory to that, though, was that I gave a lot of pedantic reviews in the original PR and made
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;epage&quot;&gt;epage&lt;&#x2F;a&gt;, the original author who drafted an implementation, quite annoyed at me. But at the same time, I wanted to
ensure that the compiler has a solid quality code to work off of, especially when it comes to initial implementations of
a feature. So I offered to implement it. It wasn&#x27;t too bad because it wasn&#x27;t my first time working on the lexer&#x2F;parser
part of the frontend, with my experience implementing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;113476&quot;&gt;c-str literals&lt;&#x2F;a&gt;. Mapping out all the possible error cases and how
best to handle them did take some time though. It was a nice learning experience nonetheless.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reviews&quot;&gt;Reviews&lt;&#x2F;h3&gt;
&lt;p&gt;I really like spending time to review PRs. At time of writing, I have 272 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pulls?q=is%3Apr+assignee%3Afee1-dead+is%3Amerged+&quot;&gt;reviewed PRs&lt;&#x2F;a&gt; that have been merged into
rust-lang&#x2F;rust. I&#x27;m also sometimes really nitpicky when it comes to reviews. I think it is good to point out things that
the other person may have not noticed instead of silently accepting, and it is also good to hear from different
perspectives whether I am a reviewer or a PR author. I want to do more reviews and if I get bored I might steal some.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ast-visitor-stuff&quot;&gt;AST visitor stuff&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;m trying to deduplicate the AST &lt;code&gt;Visitor&lt;&#x2F;code&gt; and &lt;code&gt;MutVisitor&lt;&#x2F;code&gt; functions in rustc. The work is currently tracked at
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;127615&quot;&gt;#127615&lt;&#x2F;a&gt;, and it&#x27;s mostly an exercise for me to get back at developing rustc in my free time. I&#x27;ve done some really
clever stuff in the mean time:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Visitor&lt;&#x2F;code&gt; is allowed to return a &lt;code&gt;ControlFlow&lt;&#x2F;code&gt; while visiting stuff, this is controlled by the implementer&#x27;s choice when
&lt;code&gt;impl&lt;&#x2F;code&gt;ing &lt;code&gt;Visitor&lt;&#x2F;code&gt; and setting the &lt;code&gt;Result&lt;&#x2F;code&gt; associated type to &lt;code&gt;ControlFlow&lt;&#x2F;code&gt; instead of the &lt;code&gt;()&lt;&#x2F;code&gt; by default.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;MutVisitor&lt;&#x2F;code&gt; does not allow returning &lt;code&gt;ControlFlow&lt;&#x2F;code&gt;s and only allows returning &lt;code&gt;()&lt;&#x2F;code&gt;s. This creates some hassle while
writing the macro that emits functions for both visitors. My first solution to this is to use something like the
following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;visit_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$lt&lt;&#x2F;span&gt;&lt;span&gt;,)&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; V: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$Visitor&lt;&#x2F;span&gt;&lt;span&gt;$(&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$lt&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;)?&amp;gt;(vis: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; V, id: &amp;amp;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$lt&lt;&#x2F;span&gt;&lt;span&gt;)? $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$mut&lt;&#x2F;span&gt;&lt;span&gt;)? NodeId) $(-&amp;gt; &amp;lt;V as Visitor&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$lt&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;::Result)? {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* implementation goes here *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Although trivially copyable, it has a lot of characters and served as an extra step when converting from the normal
&lt;code&gt;V::Result&lt;&#x2F;code&gt;. I then decided to use a sealed super trait trick in my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;142240&quot;&gt;latest PR&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span&gt;sealed {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rustc_ast_ir::visit::VisitorResult;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; This is for compatibility with the regular `Visitor`.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;MutVisitorResult {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Result: VisitorResult;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; MutVisitorResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;T {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Result = ();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;sealed::MutVisitorResult;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;MutVisitor: Sized + MutVisitorResult&amp;lt;Result = ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* methods go here *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, we can use &lt;code&gt;V::Result&lt;&#x2F;code&gt; however we like, &lt;em&gt;and&lt;&#x2F;em&gt; it is a drop-in replacement because we &lt;em&gt;know&lt;&#x2F;em&gt; that it is always
going to be &lt;code&gt;()&lt;&#x2F;code&gt;. Really proud of myself for this one.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wikimedia-related-stuff&quot;&gt;Wikimedia related stuff&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;wikiauthbot-ng&quot;&gt;WikiAuthBot-ng&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fee1-dead&#x2F;wikiauthbot-ng&quot;&gt;This&lt;&#x2F;a&gt; is a bot that uses OAuth to connect users on Discord to their
identity on Wikipedia. Some Wikipedia-related servers require people to authenticate to talk, while others want to use
it to allow easy querying of identity from Discord.&lt;&#x2F;p&gt;
&lt;p&gt;The original version (WikiAuthBot) was written in Python and had a lot of bugs. I rewrote it in Rust and added a lot of
additional functionalities. Working with databases stood out particularly in my process in making this a completed,
stable project. I first went with using the provided MariaDB instance on &lt;a href=&quot;https:&#x2F;&#x2F;wikitech.wikimedia.org&#x2F;wiki&#x2F;Help:Toolforge&quot;&gt;Toolforge&lt;&#x2F;a&gt;, then I thought it was too slow and
switched to using Redis as a persistent storage. Then I thought it was too slow again and I tried SQLite. But Toolforge
uses NFS for all hosted projects and SQLite is known to not work as optimally via NFS. I then went back to MariaDB and
it got fast again. All of these involved writing small Rust code that translated data from one place to the other, which
was quite some hassle.&lt;&#x2F;p&gt;
&lt;p&gt;In the end though it worked out.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;deadbeefbot&quot;&gt;DeadbeefBot&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fee1-dead&#x2F;deadbeefbot&quot;&gt;This&lt;&#x2F;a&gt; was yet another project. It&#x27;s tasks can be found on its
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;User:DeadbeefBot&quot;&gt;Wikipedia page&lt;&#x2F;a&gt;, but it essentially helps maintain some formatting of Wikipedia pages. The code was not too hard and I
worked on its design quite some time already, but it took some procrastinating for me to actually get this registered as
a cron job. But I got there in the end.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;w&quot;&gt;&lt;code&gt;w&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Yeah, it&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fee1-dead&#x2F;w&quot;&gt;another MediaWiki API library&lt;&#x2F;a&gt;. I originally wanted to use the name &lt;code&gt;mw&lt;&#x2F;code&gt;
seeing that it wasn&#x27;t used at the time, but it got taken by a &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mw&quot;&gt;bogus&lt;&#x2F;a&gt; crate. I talked to
the person who took that name and they refused to give it to me. Luckily the even shorter name &lt;code&gt;w&lt;&#x2F;code&gt; was available, so
yay!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;w&lt;&#x2F;code&gt; wants to be minimal because it doesn&#x27;t want to make assumptions about how one should use it. My previous library was
a failure as I was too ambitious in wanting to represent all possible API combinations into types (turns out it&#x27;s so
huge and messy, and in the end I would&#x27;ve only done the request part only anyways). So I decided to push that onto the
users. Users should decide how to serialize their requests and deserialize their responses.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gitlab.wikimedia.org&#x2F;repos&#x2F;mwbot-rs&#x2F;mwbot&#x2F;-&#x2F;tree&#x2F;main&#x2F;mwapi&quot;&gt;&lt;code&gt;mwapi&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; was a similar library, but my submissiveness to capitalism pushed me towards wanting a less restrictive
license than GPL, and also because I can&#x27;t easily &lt;a href=&quot;https:&#x2F;&#x2F;phabricator.wikimedia.org&#x2F;T389030&quot;&gt;work on multiple wiki instances at the same time&lt;&#x2F;a&gt;. The latter feature
was really needed for WikiAuthBot-ng as it needs to work with Wikipedia servers in many different languages (so
different API instances).&lt;&#x2F;p&gt;
&lt;p&gt;I hope I can polish it so that it is more ready for general use. I am satisfied about it enough to use it in my new
projects and I will add to it as I find missing features while using.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;script-syncing-bot&quot;&gt;Script syncing bot&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fee1-dead&#x2F;usync&quot;&gt;This&lt;&#x2F;a&gt; was my solution to a long-running problem on Wikipedia: How can user scripts
be deployed from GitHub to Wikipedia, as users try to load from the script hosted &lt;em&gt;on&lt;&#x2F;em&gt; Wikipedia? Yeah I know this might
sound silly but many times it involved primitive copy-pasting locally to update the Wikipedia page.&lt;&#x2F;p&gt;
&lt;p&gt;This bot is still going through the community processes, but I&#x27;m hoping to deploy it soon :D&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lingering-ideas&quot;&gt;Lingering ideas&lt;&#x2F;h2&gt;
&lt;p&gt;Oh I love some of these ideas.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;non-gnu-linux-from-scratch&quot;&gt;Non-GNU Linux from Scratch&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;ve always wondered how you can make a Linux system from Scratch without using gcc or GNU libc. I used to love a lot of
these esoteric Linux software stuff. It&#x27;s obviously possible: there are &lt;a href=&quot;https:&#x2F;&#x2F;os.ewe.moe&#x2F;about&quot;&gt;projects&lt;&#x2F;a&gt; that have
achieved this feat, but I have yet to see a nice tutorial on a step-by-step construction of this system, similar to the
legendary LFS book. I hope to write a blogpost when I find out about how myself.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wasm-based-package-managing&quot;&gt;WASM based package managing&lt;&#x2F;h3&gt;
&lt;p&gt;This is semi-related to the thing above. I&#x27;ve been using Nix for a &lt;em&gt;long&lt;&#x2F;em&gt; time and both the language and the package
manager are driving me a bit crazy. It&#x27;s so burdensome to start a new package and&#x2F;or write your own configuration,
because there are so many different ways to achieve the same thing and there is no rigid way of how things get to be
structured.&lt;&#x2F;p&gt;
&lt;p&gt;I want to fix that, and my Rusted brain wants me to make something in Rust. So I&#x27;m thinking of making package
descriptions from Rust files that will compile to WebAssembly, then get loaded by the package manager. I&#x27;m hoping to be
able to use some of the free time that I have at the moment to try something out, after I had done a complete LFS
walkthrough and understood the process.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rustfmt-competitor&quot;&gt;Rustfmt competitor&lt;&#x2F;h3&gt;
&lt;p&gt;I really want a replace for rustfmt because I had a suboptimal experience when trying to improve the codebase. A lot of
things are locked behind rustfmt&#x27;s stability guarantee which forbids breaking changes to formatted code and forces new
things behind an edition gate. I don&#x27;t like it because I don&#x27;t think the codebase is solid enough for such a stability
guarantee to work. More cleanups are necessary. I don&#x27;t think &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tweag&#x2F;topiary&quot;&gt;Topiary&lt;&#x2F;a&gt; will be good
enough in a reasonable timeframe to compete with rustfmt (it might be a little too ambitious).&lt;&#x2F;p&gt;
&lt;p&gt;More investigation needed.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;spi-stuff&quot;&gt;SPI stuff&lt;&#x2F;h3&gt;
&lt;p&gt;On Wikipedia there&#x27;s this process called Sock puppet investigations that investigates whether someone has used multiple
accounts to abuse. There are two things that I really want to work on, when I get time:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CheckUsers have access to IP and additional data that helps determine whether two accounts are operated by the same
person. I want to improve the CheckUser interface because I think the current interface is not streamlined enough for
a smooth operation. This will start as a user script adding shortcuts, and I plan to gradually add more stuff to have
a more complete investigation experience.&lt;&#x2F;li&gt;
&lt;li&gt;SPIs are really hard. Now that we have large language models, it might be really interesting to gather data from past
cases and see which ones have resulted in blocks being placed and which ones have been declined. There are of course
levels to that, for example sometimes it might result in CheckUser being run and sometimes it won&#x27;t. Having data and
using models to analyze this might give people who work at SPI a lot of insight as to what makes good SPI cases good
(factoring in variables such as response times, what actions resulted from the report, basic data about the filer and
the users that have been filed against), and maybe it may also be useful to predict (for fun) the course of new SPI
cases as they come in.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;h2&gt;
&lt;p&gt;I like writing and it is nice to document stuff that I&#x27;m doing. But I just do a lot of things and it is sometimes hard
to fully summarize. I hope after this long post I can pick up and do more regular devlogs next.&lt;&#x2F;p&gt;
&lt;p&gt;Did you like this post? Let me know :D&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>My First Patch to Linux</title>
        <published>2024-07-17T00:00:00+00:00</published>
        <updated>2024-07-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              beef
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://fee1-dead.github.io/linux-patch-fail/"/>
        <id>https://fee1-dead.github.io/linux-patch-fail/</id>
        
        <content type="html" xml:base="https://fee1-dead.github.io/linux-patch-fail/">&lt;p&gt;About half a year ago, I &lt;a href=&quot;https:&#x2F;&#x2F;lists.freedesktop.org&#x2F;archives&#x2F;amd-gfx&#x2F;2024-January&#x2F;102810.html&quot;&gt;submitted&lt;&#x2F;a&gt; my first patch to Linux. I initially thought the patch wasn&#x27;t good, but I discovered something as I finished writing this blog post. Anyways, it was interesting to learn a very different system for submitting code to upstream.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;discovering-the-issue&quot;&gt;Discovering the issue&lt;&#x2F;h3&gt;
&lt;p&gt;I got a brand new graphics card and I wanted to play with it. But Linux wouldn&#x27;t let me. Some
searches led me to &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.freedesktop.org&#x2F;drm&#x2F;amd&#x2F;-&#x2F;issues&#x2F;2991&quot;&gt;this issue&lt;&#x2F;a&gt; where people have bisected the cause. So why don&#x27;t we just revert the commit that caused it? I did that, tried
running with the kernel with that commit reverted and the issue got fixed again.&lt;&#x2F;p&gt;
&lt;p&gt;So.. there&#x27;s probably something wrong in that commit. Although I have no experience in writing graphics drivers in C, submitting the revert upstream should be easy..&lt;&#x2F;p&gt;
&lt;h3 id=&quot;following-the-guide&quot;&gt;Following the guide&lt;&#x2F;h3&gt;
&lt;p&gt;Okay. Linux uses Git. Surely there&#x27;s not much difference to contributing to a project on GitHub, right? Well, no. Let&#x27;s do a brief walkthrough of the &lt;a href=&quot;https:&#x2F;&#x2F;docs.kernel.org&#x2F;process&#x2F;submitting-patches.html&quot;&gt;guide&lt;&#x2F;a&gt; to submitting a patch to Linux:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Clone the code. See? It&#x27;s the same as.. wait a second. Okay. There are many different trees other than the mainline tree and depending on where you send the patch to, you may want to choose the tree &lt;em&gt;they&#x27;re&lt;&#x2F;em&gt; using.&lt;&#x2F;li&gt;
&lt;li&gt;Write the change. Well this part is the same as developing on any project, except you&#x27;d just be writing code for Linux instead.&lt;&#x2F;li&gt;
&lt;li&gt;Commit. You&#x27;d need to add the relevant Closes: and the Signed-off-by: tags. Not too hard, but still different.&lt;&#x2F;li&gt;
&lt;li&gt;Submit the patch. As the last step, you have to send an email to the correct place that would review your patch. You&#x27;d either have to configure Git to authenticate to your email and send an email with &lt;code&gt;git send-email&lt;&#x2F;code&gt;, or configure your email client to send in plain-text your patch.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;what-went-wrong&quot;&gt;What went wrong?&lt;&#x2F;h3&gt;
&lt;p&gt;Well.. I had no trouble &lt;em&gt;producing&lt;&#x2F;em&gt; a patch that could get sent upstream, in the end, it was just a simple revert. Even though there were some conflicts, editing the code for a revert was still quite easy. &lt;em&gt;Sending&lt;&#x2F;em&gt; the patch was a bit of nuisance, as I had to configure gmail to send in plain-text mode and copy the patch there, but still, there were no problems.&lt;&#x2F;p&gt;
&lt;p&gt;The problem was something in between. Unfamiliar with the patch format as I was, I got confused about indentation.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;patch&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-patch &quot;&gt;&lt;code class=&quot;language-patch&quot; data-lang=&quot;patch&quot;&gt;&lt;span&gt;@@ -345,18 +339,18 @@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;static void kfd_init_apertures_v9(struct kfd_process_device *pdd, uint8_t id)
&lt;&#x2F;span&gt;&lt;span&gt;        pdd-&amp;gt;lds_base = MAKE_LDS_APP_BASE_V9();
&lt;&#x2F;span&gt;&lt;span&gt;        pdd-&amp;gt;lds_limit = MAKE_LDS_APP_LIMIT(pdd-&amp;gt;lds_base);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-       pdd-&amp;gt;gpuvm_base = PAGE_SIZE;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+       &#x2F;* Raven needs SVM to support graphic handle, etc. Leave the small
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        * reserved space before SVM on Raven as well, even though we don&amp;#39;t
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        * have to.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        * Set gpuvm_base and gpuvm_limit to CANONICAL addresses so that they
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        * are used in Thunk to reserve SVM.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+       pdd-&amp;gt;gpuvm_base = SVM_USER_BASE;
&lt;&#x2F;span&gt;&lt;span&gt;        pdd-&amp;gt;gpuvm_limit =
&lt;&#x2F;span&gt;&lt;span&gt;                pdd-&amp;gt;dev-&amp;gt;kfd-&amp;gt;shared_resources.gpuvm_size - 1;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        pdd-&amp;gt;scratch_base = MAKE_SCRATCH_APP_BASE_V9();
&lt;&#x2F;span&gt;&lt;span&gt;        pdd-&amp;gt;scratch_limit = MAKE_SCRATCH_APP_LIMIT(pdd-&amp;gt;scratch_base);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-       &#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        * Place TBA&#x2F;TMA on opposite side of VM hole to prevent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        * stray faults from triggering SVM on these pages.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-       pdd-&amp;gt;qpd.cwsr_base = pdd-&amp;gt;dev-&amp;gt;kfd-&amp;gt;shared_resources.gpuvm_size;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;.. Am I sure that the code in the &lt;code&gt;+&lt;&#x2F;code&gt;s of the patch are aligned with the rest of the code there?
Wouldn&#x27;t that just have one less space when you apply the patch? Shouldn&#x27;t the patched parts have
an additional space compared to the rest?&lt;&#x2F;p&gt;
&lt;p&gt;In the midst of questioning myself and indentation of patches, I decided to add an extra space to all
the lines starting with a &lt;code&gt;+&lt;&#x2F;code&gt; in that patch. That resulted in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;torvalds&#x2F;linux&#x2F;commit&#x2F;0f35b0a7b8fa402adbffa2565047cdcc4c480153&quot;&gt;this&lt;&#x2F;a&gt;. Indentation looks out of place, all due to my poor formatting..&lt;&#x2F;p&gt;
&lt;h3 id=&quot;huh&quot;&gt;Huh?&lt;&#x2F;h3&gt;
&lt;p&gt;Okay wait. I wanted to end my blogpost there. That was my original plan. I write about an indentation mistake I did when submitting a patch for Linux, for some reason they decided to accept it, but it was my fault, I would apologize for that and hope people understand the mistake as a first-time contributor. But the indentation looks &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.freedesktop.org&#x2F;agd5f&#x2F;linux&#x2F;-&#x2F;commit&#x2F;0f35b0a7b8fa402adbffa2565047cdcc4c480153&quot;&gt;perfectly fine&lt;&#x2F;a&gt; in the reviewer&#x27;s git repo.&lt;&#x2F;p&gt;
&lt;p&gt;Did they fix it for me? Why did the diff on mainline Linux look like that then? Well I had a theory. The indentation in different trees were different, so when a patch based on the amd tree got sent to the mainline, the indentation did not match the code on the mainline tree. So it was not something caused by poor indentation on my side..&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I had taken on guilt for poor indentation that I thought landed to the mainline. When the reviewer probably fixed it themselves, and the indentation problem I thought was caused by me was probably due to something else. And blogging about it was how I discovered the truth. Oh well.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;closing&quot;&gt;Closing&lt;&#x2F;h3&gt;
&lt;p&gt;So that&#x27;s my experience of sending a patch to the Linux kernel for the first time. Rust for Linux looks like it is being actively developed. If it actually goes to the mainstream, it might give me more opportunity to contribute to Linux with a language that I actually understand. Hopefully, this won&#x27;t be the last patch I will submit to Linux!&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Well that&#x27;s what I &lt;em&gt;think&lt;&#x2F;em&gt; has happened. If anyone know what actually happened please let me know.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Devlog 001</title>
        <published>2023-11-27T00:00:00+00:00</published>
        <updated>2023-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              beef
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://fee1-dead.github.io/devlog001/"/>
        <id>https://fee1-dead.github.io/devlog001/</id>
        
        <content type="html" xml:base="https://fee1-dead.github.io/devlog001/">&lt;p&gt;I&#x27;ve been thinking of starting a devlog for a long time. There are many reasons why I couldn&#x27;t just start it previously:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Lack of time. Do I really have time to do this stuff? Maybe I do, but am I going to spend too much time trying to get everything to look good and exactly as I wanted it on first try? Historically, that answer has been yes. A few days ago, I realized that that&#x27;s not good, so instead of spending time on the looks I am just going to write some stuff.&lt;&#x2F;li&gt;
&lt;li&gt;Perfectionism. Old me wanted a perfectly built place that matched what I wanted, but I have changed. Now I just want a place to write some ideas and updates.&lt;&#x2F;li&gt;
&lt;li&gt;Focus. I mean, blog posts that actually get read by other people have a clear focus in what they want to write about, and I usually don&#x27;t. Do I really need that for a blog? Not really.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Hopefully, by the time someone reads the above three points, they will also know that I ramble about things that don&#x27;t really interest them. I guess that&#x27;s fine, though, since maybe this can be a place where I write for myself and not for others. This is my first post ever, so there&#x27;s time and space to explore things!&lt;&#x2F;p&gt;
&lt;p&gt;Okay here&#x27;s some exciting technical stuff:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;working-with-effects-in-rust&quot;&gt;Working with effects in Rust&lt;&#x2F;h3&gt;
&lt;p&gt;In the Rust compiler, we&#x27;re working on &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;inside-rust&#x2F;2022&#x2F;07&#x2F;27&#x2F;keyword-generics.html&quot;&gt;an initiative&lt;&#x2F;a&gt; to make an internal refactoring while not changing the user-facing aspects of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;67792&quot;&gt;a feature&lt;&#x2F;a&gt; named &lt;code&gt;const_trait_impl&lt;&#x2F;code&gt;. The old implementation simply made the feature a special case, treating it in many different ways in many different places, and had many issues that I won&#x27;t go into in this dev log. (maybe for a separate blog post though!) But here are some progress and challenges recently:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;renabling-effects-in-core&quot;&gt;Renabling effects in &lt;code&gt;core&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;As a step towards a more mature feature, we previously &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;114776&quot;&gt;enabled&lt;&#x2F;a&gt; effects in &lt;code&gt;core&lt;&#x2F;code&gt;, which made &lt;code&gt;const fn&lt;&#x2F;code&gt; and methods desugar into generic, depending on whether the function is called from a const context, like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;() {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; turns to..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; host: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; = true&amp;gt;() {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, the &lt;code&gt;host&lt;&#x2F;code&gt; flag is set to &lt;code&gt;false&lt;&#x2F;code&gt; if the function is called in compile time, while it is set to &lt;code&gt;true&lt;&#x2F;code&gt; if called from a context that runs in runtime. This desugaring &lt;em&gt;shouldn&#x27;t&lt;&#x2F;em&gt; have any effects on anyone using the standard library or anything within the standard library. But we &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;116856&quot;&gt;disabled&lt;&#x2F;a&gt; &lt;code&gt;effects&lt;&#x2F;code&gt; after finding out that actually, you can just call &lt;code&gt;a::&amp;lt;true&amp;gt;()&lt;&#x2F;code&gt; when this desugaring is enabled, breaking the assumption that this feature is invisible to users. This was &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;117171&quot;&gt;fixed&lt;&#x2F;a&gt; shortly later, while a similar fallout that caused rustdoc to display these desugared parameters in the generated documentation was fixed in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;116670&quot;&gt;two&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;117531&quot;&gt;PRs&lt;&#x2F;a&gt; by oli-obk and fmease. After these fixes were merged, I went ahead and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;117825&quot;&gt;reenabled&lt;&#x2F;a&gt; effects.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;effects-desugaring-with-default-type-params&quot;&gt;Effects desugaring with default type params&lt;&#x2F;h4&gt;
&lt;p&gt;The &lt;code&gt;PartialEq&lt;&#x2F;code&gt; trait is defined like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;PartialEq&amp;lt;Rhs: ?Sized = Self&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* stuff *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And if we had the effects desugaring, it would be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;PartialEq&amp;lt;Rhs: ?Sized = Self, const host: bool = true&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* stuff *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here we have a problem, since if someone tried to implement &lt;code&gt;const PartialEq&lt;&#x2F;code&gt;, their impl could look like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;const PartialEq for () {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; desugars to..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; host: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; PartialEq&amp;lt;host&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; () {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But this (currently) generates a mismatch error since a const param &lt;code&gt;host&lt;&#x2F;code&gt; is supplied to a type param &lt;code&gt;Rhs&lt;&#x2F;code&gt;! To fix this, I have two ideas in mind:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Give the desugaring of &lt;code&gt;impl const&lt;&#x2F;code&gt; and &lt;code&gt;: ~const&lt;&#x2F;code&gt; bounds special treatment, such that the parameters it desugar into must be dealt with specifically as opposed to the normal params supplied (this might involve changing the internal HIR representation of generic args)&lt;&#x2F;li&gt;
&lt;li&gt;Give the params special treatment, but only use some sort of an internal marker to distinguish desugared host bounds. We&#x27;d change the logic somewhere when handling those params and fit the desugared param into its place correctly.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I&#x27;ll say they&#x27;re quite similar and we might have to end up doing both. We&#x27;ll see!&lt;&#x2F;p&gt;
&lt;h4 id=&quot;checking-all-method-calls-for-effects&quot;&gt;Checking all method calls for effects&lt;&#x2F;h4&gt;
&lt;p&gt;Somewhere in the code for Rust&#x27;s type checker, there&#x27;s a function that &lt;em&gt;enforces effects&lt;&#x2F;em&gt;. This means that we try to equate effects to what we expect them to be. Here&#x27;s an example to illustrate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; all desugared, since you probably know what it means
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;some_const_fn&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; host: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; = true&amp;gt;() {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;a_non_const_fn&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    some_const_fn::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;another_const_fn&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; host: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; = true&amp;gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    some_const_fn::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;CONST_ITEM&lt;&#x2F;span&gt;&lt;span&gt;: () = {
&lt;&#x2F;span&gt;&lt;span&gt;    some_const_fn::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Before typeck (the process that we call type-checking), effect parameters are unknown (marked with a question mark), and the &lt;code&gt;enforce_context_effects&lt;&#x2F;code&gt; comes in and fills them in. These examples are all different:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; all desugared, since you probably know what it means
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;some_const_fn&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; host: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; = true&amp;gt;() {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;a_non_const_fn&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; not a const-context, so fill in `true`.
&lt;&#x2F;span&gt;&lt;span&gt;    some_const_fn::&amp;lt;true&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;another_const_fn&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; host: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; = true&amp;gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in a const-fn context (could be called in runtime _or_ compile time),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; fill in the host param that this function has.
&lt;&#x2F;span&gt;&lt;span&gt;    some_const_fn::&amp;lt;host&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;CONST_ITEM&lt;&#x2F;span&gt;&lt;span&gt;: () = {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in an always-const context (must be evaluated at compile time),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; fill in `false`.
&lt;&#x2F;span&gt;&lt;span&gt;    some_const_fn::&amp;lt;false&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While trying to make &lt;code&gt;PartialEq&lt;&#x2F;code&gt; work as a &lt;code&gt;const_trait&lt;&#x2F;code&gt;, I noticed that method calls desugared by calling &lt;code&gt;a == b&lt;&#x2F;code&gt; don&#x27;t get checked. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;118282&quot;&gt;This PR&lt;&#x2F;a&gt; fixed that. Another step towards enabling effects by default for all crates!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;where-are-the-other-sections&quot;&gt;Where are the other sections?&lt;&#x2F;h3&gt;
&lt;p&gt;I didn&#x27;t have time so I&#x27;ll end here. I do want to summarize the state of some personal projects that I have been working on for the past few years in a future devlog, but I also want to get this post &lt;em&gt;done&lt;&#x2F;em&gt;, so maybe in the next one!&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
